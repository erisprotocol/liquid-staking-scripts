/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * This structure describes the query messages available in the contract.
 */
export type QueryMsg =
  | {
      user_info: {
        time?: Time | null;
        user: string;
      };
    }
  | {
      user_infos: {
        limit?: number | null;
        start_after?: string | null;
        time?: Time | null;
      };
    }
  | {
      config: {};
    }
  | {
      user_shares: {
        times?: Times | null;
        user: Addr;
      };
    }
  | {
      user_first_participation: {
        user: Addr;
      };
    }
  | {
      gauge_info: {
        gauge: string;
        key: string;
        time?: Time | null;
      };
    }
  | {
      gauge_infos: {
        gauge: string;
        keys?: string[] | null;
        time?: Time | null;
      };
    }
  | {
      distribution: {
        gauge: string;
        time?: Time | null;
      };
    }
  | {
      distributions: {
        time?: Time | null;
      };
    }
  | {
      last_distributions: {};
    }
  | {
      last_distribution_period: {};
    }
  | {
      user_pending_rebase: {
        user: Addr;
      };
    };
export type Time =
  | ("current" | "next" | "last")
  | {
      time: number;
    }
  | {
      period: number;
    };
export type Times =
  | "current"
  | {
      times: number[];
    }
  | {
      periods: number[];
    };
/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;
