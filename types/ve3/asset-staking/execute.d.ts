/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type ExecuteMsg =
  | {
      receive: Cw20ReceiveMsg;
    }
  | {
      stake: {
        recipient?: string | null;
      };
    }
  | {
      unstake: AssetBaseFor_Addr;
    }
  | {
      claim_reward: AssetInfoBaseFor_Addr;
    }
  | {
      claim_rewards: {
        assets?: AssetInfoBaseFor_Addr[] | null;
      };
    }
  | {
      whitelist_assets: AssetInfoWithConfigFor_String[];
    }
  | {
      remove_assets: AssetInfoBaseFor_Addr[];
    }
  | {
      update_asset_config: AssetInfoWithConfigFor_String;
    }
  | {
      set_asset_reward_distribution: AssetDistribution[];
    }
  | {
      update_rewards: {};
    }
  | {
      distribute_take_rate: {
        assets?: AssetInfoBaseFor_Addr[] | null;
        update?: boolean | null;
      };
    }
  | {
      distribute_bribes: {
        assets?: AssetInfoBaseFor_Addr[] | null;
        update?: boolean | null;
      };
    }
  | {
      callback: CallbackMsg;
    };
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;
/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.
 *
 * This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.
 */
export type Binary = string;
/**
 * Represents the type of an fungible asset.
 *
 * Each **asset info** instance can be one of three variants:
 *
 * - Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.
 */
export type AssetInfoBaseFor_Addr =
  | {
      native: string;
    }
  | {
      cw20: Addr;
    };
/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;
export type StakeConfigFor_String =
  | "default"
  | {
      astroport: {
        contract: string;
        reward_infos: AssetInfoBaseFor_String[];
      };
    }
  | {
      ve3: {
        contract: string;
        reward_infos: AssetInfoBaseFor_String[];
      };
    };
/**
 * Represents the type of an fungible asset.
 *
 * Each **asset info** instance can be one of three variants:
 *
 * - Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.
 */
export type AssetInfoBaseFor_String =
  | {
      native: string;
    }
  | {
      cw20: string;
    };
/**
 * A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0
 *
 * The greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)
 */
export type Decimal = string;
export type CallbackMsg =
  | {
      update_rewards: {
        initial_balance: AssetBaseFor_Addr;
      };
    }
  | {
      track_bribes: {
        for_asset: AssetInfoBaseFor_Addr;
        initial_balances: AssetBaseFor_Addr[];
      };
    }
  | {
      distribute_bribes: {
        assets?: AssetInfoBaseFor_Addr[] | null;
      };
    };

/**
 * Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg
 */
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
}
/**
 * Represents a fungible asset with a known amount
 *
 * Each asset instance contains two values: `info`, which specifies the asset's type (CW20 or native), and its `amount`, which specifies the asset's amount.
 */
export interface AssetBaseFor_Addr {
  /**
   * Specifies the asset's amount
   */
  amount: Uint128;
  /**
   * Specifies the asset's type (CW20 or native)
   */
  info: AssetInfoBaseFor_Addr;
}
export interface AssetInfoWithConfigFor_String {
  config?: AssetConfigFor_String | null;
  info: AssetInfoBaseFor_String;
}
export interface AssetConfigFor_String {
  stake_config: StakeConfigFor_String;
  yearly_take_rate?: Decimal | null;
}
export interface AssetDistribution {
  asset: AssetInfoBaseFor_Addr;
  distribution: Decimal;
  total_vp: Uint128;
}
