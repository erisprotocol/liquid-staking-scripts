/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Represents the type of an fungible asset.
 *
 * Each **asset info** instance can be one of three variants:
 *
 * - Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.
 */
export type AssetInfoBaseFor_String =
  | {
      native: string;
    }
  | {
      cw20: string;
    };
export type OracleFor_String =
  | "usdc"
  | {
      pair: {
        contract: string;
        from_decimals?: number | null;
        simulation_amount: Uint128;
      };
    }
  | {
      route: {
        contract: string;
        from_decimals?: number | null;
        path: AssetInfoBaseFor_String[];
        simulation_amount: Uint128;
      };
    };
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;

export interface InstantiateMsg {
  alliance_token_denom: string;
  allowed_actions?: string[] | null;
  global_config_addr: string;
  oracles: [AssetInfoBaseFor_String, OracleFor_String][];
  reward_denom: string;
  veto_owner: string;
  vetos: VetoRightFor_String[];
}
export interface VetoRightFor_String {
  delay_s: number;
  spend_above_usd: Uint128;
  spend_above_usd_30d: Uint128;
  vetoer: string;
}
