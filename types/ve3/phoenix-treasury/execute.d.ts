/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type ExecuteMsg =
  | {
      update_veto_config: {
        vetos: VetoRightFor_String[];
      };
    }
  | {
      update_config: {
        add_oracle?: [AssetInfoBaseFor_String, OracleFor_String][] | null;
        remove_oracle?: AssetInfoBaseFor_String[] | null;
      };
    }
  | {
      clawback: {
        assets: AssetInfoBaseFor_String[];
        recipient: string;
      };
    }
  | {
      setup: {
        action: TreasuryActionSetup;
        name: string;
      };
    }
  | {
      cancel: {
        id: number;
      };
    }
  | {
      veto: {
        id: number;
      };
    }
  | {
      claim: {
        id: number;
      };
    }
  | {
      update_milestone: {
        enabled: boolean;
        id: number;
        index: number;
      };
    }
  | {
      execute_dca: {
        id: number;
        min_received?: Uint128 | null;
      };
    }
  | {
      execute_otc: {
        id: number;
        offer_amount: Uint128;
      };
    }
  | {
      claim_rewards: {};
    }
  | {
      alliance_delegate: AllianceDelegateMsg;
    }
  | {
      alliance_undelegate: AllianceUndelegateMsg;
    }
  | {
      alliance_redelegate: AllianceRedelegateMsg;
    }
  | {
      remove_validator: {
        validator: string;
      };
    };
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;
/**
 * Represents the type of an fungible asset.
 *
 * Each **asset info** instance can be one of three variants:
 *
 * - Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.
 */
export type AssetInfoBaseFor_String =
  | {
      native: string;
    }
  | {
      cw20: string;
    };
export type OracleFor_String =
  | "usdc"
  | {
      pair: {
        contract: string;
        simulation_amount: Uint128;
      };
    }
  | {
      route: {
        contract: string;
        path: AssetInfoBaseFor_String[];
        simulation_amount: Uint128;
      };
    };
export type TreasuryActionSetup =
  | {
      payment: {
        payments: PaymentDescription[];
      };
    }
  | {
      otc: {
        amount: AssetBaseFor_Addr;
        into: AssetBaseFor_Addr;
      };
    }
  | {
      dca: {
        amount: AssetBaseFor_Addr;
        cooldown_s: number;
        end_s: number;
        into: AssetInfoBaseFor_Addr;
        max_per_swap?: Uint128 | null;
        start_s: number;
      };
    }
  | {
      milestone: {
        asset_info: AssetInfoBaseFor_Addr;
        milestones: Milestone[];
        recipient: string;
      };
    }
  | {
      vesting: {
        amount: AssetBaseFor_Addr;
        end_s: number;
        recipient: string;
        start_s: number;
      };
    };
/**
 * Represents the type of an fungible asset.
 *
 * Each **asset info** instance can be one of three variants:
 *
 * - Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.
 */
export type AssetInfoBaseFor_Addr =
  | {
      native: string;
    }
  | {
      cw20: Addr;
    };
/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;

export interface VetoRightFor_String {
  delay_s: number;
  spend_above_usd: Uint128;
  spend_above_usd_30d: Uint128;
  vetoer: string;
}
export interface PaymentDescription {
  asset: AssetBaseFor_Addr;
  claimable_after_s?: number | null;
  recipient: string;
}
/**
 * Represents a fungible asset with a known amount
 *
 * Each asset instance contains two values: `info`, which specifies the asset's type (CW20 or native), and its `amount`, which specifies the asset's amount.
 */
export interface AssetBaseFor_Addr {
  /**
   * Specifies the asset's amount
   */
  amount: Uint128;
  /**
   * Specifies the asset's type (CW20 or native)
   */
  info: AssetInfoBaseFor_Addr;
}
export interface Milestone {
  amount: Uint128;
  text: string;
}
export interface AllianceDelegateMsg {
  delegations: AllianceDelegation[];
}
export interface AllianceDelegation {
  amount: Uint128;
  validator: string;
}
export interface AllianceUndelegateMsg {
  undelegations: AllianceDelegation[];
}
export interface AllianceRedelegateMsg {
  redelegations: AllianceRedelegation[];
}
export interface AllianceRedelegation {
  amount: Uint128;
  dst_validator: string;
  src_validator: string;
}
