/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;
/**
 * Represents the type of an fungible asset.
 *
 * Each **asset info** instance can be one of three variants:
 *
 * - Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.
 */
export type AssetInfoBaseFor_Addr =
  | {
      native: string;
    }
  | {
      cw20: Addr;
    };
/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;
export type Assets = AssetBaseFor_Addr[];
export type TreasuryActionRuntime =
  | {
      payment: {
        open: PaymentDescription[];
      };
    }
  | {
      otc: {};
    }
  | {
      dca: {
        last_execution_s: number;
      };
    }
  | {
      milestone: {
        milestones: MilestoneRuntime[];
      };
    }
  | {
      vesting: {
        last_claim_s: number;
      };
    };
export type TreasuryActionSetup =
  | {
      payment: {
        payments: PaymentDescription[];
      };
    }
  | {
      otc: {
        amount: AssetBaseFor_Addr;
        into: AssetBaseFor_Addr;
      };
    }
  | {
      dca: {
        amount: AssetBaseFor_Addr;
        cooldown_s: number;
        end_s: number;
        into: AssetInfoBaseFor_Addr;
        max_per_swap?: Uint128 | null;
        start_s: number;
      };
    }
  | {
      milestone: {
        asset_info: AssetInfoBaseFor_Addr;
        milestones: Milestone[];
        recipient: string;
      };
    }
  | {
      vesting: {
        amount: AssetBaseFor_Addr;
        end_s: number;
        recipient: string;
        start_s: number;
      };
    };

export interface TreasuryAction {
  active_from: number;
  cancelled: boolean;
  done: boolean;
  id: number;
  name: string;
  reserved: Assets;
  runtime: TreasuryActionRuntime;
  setup: TreasuryActionSetup;
  total_usd: Uint128;
  total_usd_30d: Uint128;
}
/**
 * Represents a fungible asset with a known amount
 *
 * Each asset instance contains two values: `info`, which specifies the asset's type (CW20 or native), and its `amount`, which specifies the asset's amount.
 */
export interface AssetBaseFor_Addr {
  /**
   * Specifies the asset's amount
   */
  amount: Uint128;
  /**
   * Specifies the asset's type (CW20 or native)
   */
  info: AssetInfoBaseFor_Addr;
}
export interface PaymentDescription {
  asset: AssetBaseFor_Addr;
  claimable_after_s?: number | null;
  recipient: string;
}
export interface MilestoneRuntime {
  amount: Uint128;
  claimed: boolean;
  enabled: boolean;
}
export interface Milestone {
  amount: Uint128;
  text: string;
}
