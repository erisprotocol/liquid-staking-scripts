/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;
export type LsdTypeFor_Addr =
  | {
      eris: {
        addr: Addr;
        cw20: Addr;
      };
    }
  | {
      backbone: {
        addr: Addr;
        cw20: Addr;
      };
    }
  | {
      stader: {
        addr: Addr;
        cw20: Addr;
      };
    }
  | {
      prism: {
        addr: Addr;
        cw20: Addr;
      };
    };
export type UtilizationMethod = {
  steps: [Decimal, Decimal][];
};
/**
 * A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0
 *
 * The greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)
 */
export type Decimal = string;

/**
 * This struct is used to return a query result with the general contract configuration.
 */
export interface ConfigResponse {
  config: Description;
  fee_config: FeeConfigFor_Addr;
  owner: Addr;
  whitelist?: Addr[] | null;
}
/**
 * This structure stores the main config parameters for a constant product pair contract.
 */
export interface Description {
  lp_addr: Addr;
  lsds: LsdConfigFor_Addr[];
  unbond_time_s: number;
  utilization_method: UtilizationMethod;
  utoken: string;
}
export interface LsdConfigFor_Addr {
  disabled: boolean;
  lsd_type: LsdTypeFor_Addr;
  name: string;
}
export interface FeeConfigFor_Addr {
  immediate_withdraw_fee: Decimal;
  protocol_fee_contract: Addr;
  protocol_performance_fee: Decimal;
  protocol_withdraw_fee: Decimal;
}
