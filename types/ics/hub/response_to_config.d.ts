/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type DelegationStrategyFor_String =
  | {
      defined: {
        shares_bps: [string, BasicPoints][];
        [k: string]: unknown;
      };
    }
  | {
      gauges: {
        /**
         * gauges based on vAmp voting
         */
        amp_gauges: string;
        /**
         * max amount of delegation needed
         */
        max_delegation_bps: BasicPoints;
        /**
         * min amount of delegation needed
         */
        min_delegation_bps: BasicPoints;
        /**
         * count of validators that should receive delegations
         */
        validator_count: number;
        [k: string]: unknown;
      };
    };
/**
 * BasicPoints struct implementation. BasicPoints value is within [0, 10000] interval. Technically BasicPoints is wrapper over [`u16`] with additional limit checks and several implementations of math functions so BasicPoints object can be used in formulas along with [`Uint128`] and [`Decimal`].
 */
export type BasicPoints = number;
/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;
/**
 * A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0
 *
 * The greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)
 */
export type Decimal = string;

export interface ConfigResponse {
  /**
   * Stages that must be used by permissionless users Specifies wether donations are allowed.
   */
  allow_donations: boolean;
  /**
   * Strategy how delegations should be handled
   */
  delegation_strategy: DelegationStrategyFor_String;
  /**
   * How often the unbonding queue is to be executed, in seconds
   */
  epoch_period: number;
  /**
   * Information about applied fees
   */
  fee_config: FeeConfig;
  /**
   * Pending ownership transfer, awaiting acceptance by the new owner
   */
  new_owner?: string | null;
  /**
   * Account who can call harvest
   */
  operator: string;
  /**
   * Account who can call certain privileged functions
   */
  owner: string;
  /**
   * Address of the Stake token
   */
  stake_token: string;
  /**
   * The staking module's unbonding time, in seconds
   */
  unbond_period: number;
  /**
   * Underlying staked token on controller chain
   */
  utoken_controller: string;
  /**
   * Underlying staked token
   */
  utoken_host: string;
  /**
   * Initial set of validators who will receive the delegations
   */
  validators: string[];
  /**
   * Update the vote_operator
   */
  vote_operator?: string | null;
  [k: string]: unknown;
}
export interface FeeConfig {
  /**
   * Contract address where fees are sent
   */
  protocol_fee_contract: Addr;
  /**
   * Fees that are being applied during reinvest of staking rewards
   */
  protocol_reward_fee: Decimal;
}
