/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;
export type Coins = Coin[];

export interface IcaResponse {
  /**
   * Balances of all host ICQ accounts
   */
  account_balances: AccountBalances;
  ica_config: IcaConfig;
  ica_senders: IcaSender[];
  [k: string]: unknown;
}
/**
 * A structure that can be reconstructed from **StorageValues**'s for the **Balance Interchain Query**. Contains coins that are held by some account on remote chain.
 */
export interface AccountBalances {
  accounts: {
    [k: string]: AccountBalance;
  };
}
export interface AccountBalance {
  addr: string;
  coins: Coins;
}
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export interface IcaConfig {
  ack_fee?: Coin[] | null;
  connection_id: string;
  controller_channel: string;
  host_channel: string;
  host_prefix: string;
  icq_balance_id?: number | null;
  icq_delegations_id?: number | null;
  min_fee_withdrawal?: Uint128 | null;
  min_reward_restake?: Uint128 | null;
  timeout_fee?: Coin[] | null;
}
export interface IcaSender {
  account_id: string;
  address: string;
  controller_connection_id: string;
}
