/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * This is used for uploading logo data, or setting it in InstantiateData
 */
export type Logo =
  | {
      url: string;
    }
  | {
      embedded: EmbeddedLogo;
    };
/**
 * This is used to store the logo on the blockchain in an accepted format. Enforce maximum size of 5KB on all variants.
 */
export type EmbeddedLogo =
  | {
      svg: Binary;
    }
  | {
      png: Binary;
    };
/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.
 *
 * This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.
 */
export type Binary = string;

/**
 * This structure stores general parameters for the voting escrow contract.
 */
export interface InstantiateMsg {
  /**
   * ampLP token address
   */
  deposit_denom: string;
  /**
   * Address that's allowed to black or whitelist contracts
   */
  guardian_addr?: string | null;
  /**
   * The list of whitelisted logo urls prefixes
   */
  logo_urls_whitelist: string[];
  /**
   * Marketing info for the voting power (vAMP)
   */
  marketing?: UpdateMarketingInfo | null;
  /**
   * The voting escrow contract owner
   */
  owner: string;
}
/**
 * This structure stores marketing information for voting escrow.
 */
export interface UpdateMarketingInfo {
  /**
   * Token description
   */
  description?: string | null;
  /**
   * Token logo
   */
  logo?: Logo | null;
  /**
   * Token marketing information
   */
  marketing?: string | null;
  /**
   * Project URL
   */
  project?: string | null;
}
