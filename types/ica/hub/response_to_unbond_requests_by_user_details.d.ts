/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;
export type ArrayOf_UnbondRequestsByUserResponseItemDetails = UnbondRequestsByUserResponseItemDetails[];

export interface UnbondRequestsByUserResponseItemDetails {
  batch?: Batch | null;
  /**
   * ID of the batch
   */
  id: number;
  pending?: PendingBatch | null;
  /**
   * The user's share in the batch
   */
  shares: Uint128;
  state: string;
}
export interface Batch {
  /**
   * Estimated time when this batch will finish unbonding
   */
  est_unbond_end_time?: number | null;
  /**
   * ID of this batch
   */
  id: number;
  /**
   * Whether this batch has already been reconciled
   */
  reconciled: boolean;
  /**
   * Whether this batch submission has failed / timeout and needs to be retried
   */
  retry: boolean;
  /**
   * Total amount of shares remaining this batch. Each `ustake` burned = 1 share
   */
  total_shares: Uint128;
  /**
   * Amount of `utoken` in this batch that have not been claimed
   */
  utoken_unclaimed: Uint128;
}
export interface PendingBatch {
  /**
   * Estimated time when this batch will be submitted for unbonding
   */
  est_unbond_start_time?: number | null;
  /**
   * ID of this batch
   */
  id: number;
  /**
   * Total amount of `ustake` to be burned in this batch
   */
  ustake_to_burn: Uint128;
}
