/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type ExecuteMsg =
  | {
      bond: {
        receiver?: string | null;
      };
    }
  | {
      donate: {};
    }
  | {
      withdraw_unbonded: {
        receiver?: string | null;
      };
    }
  | {
      transfer_ownership: {
        new_owner: string;
      };
    }
  | {
      accept_ownership: {};
    }
  | {
      drop_ownership_proposal: {};
    }
  | {
      harvest: {
        stages?: [StageType, AssetInfo, Decimal | null, Uint128 | null][][] | null;
        validators?: string[] | null;
        withdrawals?: [WithdrawType, AssetInfo][] | null;
      };
    }
  | {
      tune_delegations: {};
    }
  | {
      rebalance: {
        min_redelegation?: Uint128 | null;
      };
    }
  | {
      reconcile: {};
    }
  | {
      check_slashing: {
        /**
         * current delegations
         */
        delegations: [string, Uint128][];
        /**
         * only when the current state equals the send amount, the slash will be applied
         */
        state_total_utoken_bonded: Uint128;
      };
    }
  | {
      submit_batch: {};
    }
  | {
      callback: CallbackMsg;
    }
  | {
      update_config: {
        /**
         * Specifies wether donations are allowed.
         */
        allow_donations?: boolean | null;
        /**
         * Update the default max_spread
         */
        default_max_spread?: number | null;
        /**
         * Strategy how delegations should be handled
         */
        delegation_strategy?: DelegationStrategyFor_String | null;
        /**
         * How often the unbonding queue is to be executed, in seconds
         */
        epoch_period?: number | null;
        /**
         * Sets a new operator
         */
        operator?: string | null;
        /**
         * Contract address where fees are sent
         */
        protocol_fee_contract?: string | null;
        /**
         * Fees that are being applied during reinvest of staking rewards
         */
        protocol_reward_fee?: Decimal | null;
        /**
         * Sets the stages preset
         */
        stages_preset?: [StageType, AssetInfo, Decimal | null, Uint128 | null][][] | null;
        /**
         * The staking module's unbonding time, in seconds
         */
        unbond_period?: number | null;
        /**
         * Specifies a validators proxy contract, so that validators are not locally stored
         */
        validator_proxy?: string | null;
        /**
         * Sets the withdrawals preset
         */
        withdrawals_preset?: [WithdrawType, AssetInfo][] | null;
      };
    }
  | {
      queue_unbond: {
        receiver?: string | null;
      };
    }
  | {
      claim: {
        claims: ClaimType[];
      };
    };
export type StageType =
  | {
      eris: {
        addr: Addr;
      };
    }
  | {
      dex: {
        addr: Addr;
      };
    }
  | {
      manta: {
        addr: Addr;
        msg: MantaMsg;
      };
    };
/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;
/**
 * This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked("stake...") }; NativeToken { denom: String::from("uluna") }; ```
 */
export type AssetInfo =
  | {
      token: {
        contract_addr: Addr;
      };
    }
  | {
      native_token: {
        denom: string;
      };
    };
/**
 * A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0
 *
 * The greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)
 */
export type Decimal = string;
export type WithdrawType = {
  dex: {
    addr: Addr;
  };
};
export type CallbackMsg =
  | {
      withdraw_lps: {
        withdrawals: [WithdrawType, AssetInfo][];
      };
    }
  | {
      single_stage_swap: {
        stage: [StageType, AssetInfo, Decimal | null, Uint128 | null][];
      };
    }
  | {
      reinvest: {};
    }
  | {
      check_received_coin: {
        snapshot: Coin;
        snapshot_stake: Coin;
      };
    };
export type DelegationStrategyFor_String =
  | "uniform"
  | {
      defined: {
        shares_bps: [string, number][];
      };
    }
  | {
      gauges: {
        /**
         * weight between amp and emp gauges between 0 and 1
         */
        amp_factor_bps: number;
        /**
         * gauges based on vAmp voting
         */
        amp_gauges: string;
        /**
         * gauges based on eris merit points
         */
        emp_gauges?: string | null;
        /**
         * max amount of delegation needed
         */
        max_delegation_bps: number;
        /**
         * min amount of delegation needed
         */
        min_delegation_bps: number;
        /**
         * count of validators that should receive delegations
         */
        validator_count: number;
      };
    };
export type ClaimType = {
  default: string;
};

export interface MantaMsg {
  swap: MantaSwap;
}
export interface MantaSwap {
  min_return: Coin[];
  stages: [string, string][][];
}
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
