/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type ExecuteMsg =
  | {
      receive: Cw20ReceiveMsg;
    }
  | {
      callback: CallbackMsg;
    }
  | {
      update_config: {
        boost_fee?: Decimal | null;
        controller?: string | null;
      };
    }
  | {
      update_parameters: {
        max_quota?: Uint128 | null;
        staker_rate?: Decimal | null;
      };
    }
  | {
      controller_vote: {
        votes: [string, number][];
      };
    }
  | {
      send_income: {};
    }
  | {
      claim_rewards: {
        /**
         * the LP token contract address
         */
        lp_tokens: string[];
      };
    }
  | {
      withdraw: {
        /**
         * The amount to withdraw
         */
        amount: Uint128;
        /**
         * The address of the LP token to withdraw
         */
        lp_token: string;
      };
    }
  | {
      propose_new_owner: {
        /**
         * The validity period of the proposal to change the owner
         */
        expires_in: number;
        /**
         * The newly proposed owner
         */
        owner: string;
      };
    }
  | {
      drop_ownership_proposal: {};
    }
  | {
      claim_ownership: {};
    }
  | {
      relock: {};
    }
  | {
      request_unstake: {
        amount: Uint128;
      };
    }
  | {
      withdraw_unstaked: {
        amount?: Uint128 | null;
      };
    }
  | {
      claim_income: {};
    };
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;
/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.
 *
 * This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.
 */
export type Binary = string;
export type CallbackMsg =
  | {
      after_bond_claimed: {
        lp_token: Addr;
        prev_balances: [Addr, Uint128][];
      };
    }
  | {
      deposit: {
        amount: Uint128;
        lp_token: Addr;
        staker_addr: Addr;
      };
    }
  | {
      withdraw: {
        amount: Uint128;
        lp_token: Addr;
        staker_addr: Addr;
      };
    }
  | {
      after_bond_changed: {
        lp_token: Addr;
      };
    }
  | {
      claim_rewards: {
        lp_token: Addr;
        staker_addr: Addr;
      };
    }
  | {
      after_staking_claimed: {
        prev_balance: Uint128;
      };
    };
/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;
/**
 * A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0
 *
 * The greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)
 */
export type Decimal = string;

/**
 * Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg
 */
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
  [k: string]: unknown;
}
