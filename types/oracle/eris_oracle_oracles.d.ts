/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type QueryRequestFor_Empty =
  | {
      bank: BankQuery;
    }
  | {
      custom: Empty;
    }
  | {
      stargate: {
        /**
         * this is the expected protobuf message type (not any), binary encoded
         */
        data: Binary;
        /**
         * this is the fully qualified service path used for routing, eg. custom/cosmos_sdk.x.bank.v1.Query/QueryBalance
         */
        path: string;
        [k: string]: unknown;
      };
    }
  | {
      ibc: IbcQuery;
    }
  | {
      wasm: WasmQuery;
    };
export type BankQuery =
  | {
      balance: {
        address: string;
        denom: string;
        [k: string]: unknown;
      };
    }
  | {
      all_balances: {
        address: string;
        [k: string]: unknown;
      };
    };
/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.
 *
 * This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.
 */
export type Binary = string;
/**
 * These are queries to the various IBC modules to see the state of the contract's IBC connection. These will return errors if the contract is not "ibc enabled"
 */
export type IbcQuery =
  | {
      port_id: {
        [k: string]: unknown;
      };
    }
  | {
      list_channels: {
        port_id?: string | null;
        [k: string]: unknown;
      };
    }
  | {
      channel: {
        channel_id: string;
        port_id?: string | null;
        [k: string]: unknown;
      };
    };
export type WasmQuery =
  | {
      smart: {
        contract_addr: string;
        /**
         * msg is the json-encoded QueryMsg struct
         */
        msg: Binary;
        [k: string]: unknown;
      };
    }
  | {
      raw: {
        contract_addr: string;
        /**
         * Key is the raw key used in the contracts Storage
         */
        key: Binary;
        [k: string]: unknown;
      };
    }
  | {
      contract_info: {
        contract_addr: string;
        [k: string]: unknown;
      };
    };
export type VariableType = "uint128" | "base64" | "string";

export interface OraclesResponse {
  oracles: OracleRuntime[];
}
export interface OracleRuntime {
  executing_async: boolean;
  last_error?: string | null;
  last_update_time: number;
  oracle: Oracle;
}
export interface Oracle {
  chain?: string | null;
  contract: string;
  name: string;
  query: QueryRequestFor_Empty;
  schedule_interval_s: number;
  variables: VariableTemplate[];
}
/**
 * An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.
 *
 * It is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)
 */
export interface Empty {
  [k: string]: unknown;
}
export interface VariableTemplate {
  name: string;
  selector: string;
  variable_type: VariableType;
}
