/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u64` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);
 *
 * let b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```
 */
export type Uint64 = string;

export interface InstantiateMsg {
  /**
   * The max gas allowed in a transaction. When returning callbacks the module will use this to calculate the amount of gas to save for handling a callback error. This protects from callbacks that run out of gas preventing ACKs or timeouts from being returned.
   *
   * The contract admin can update with `MigrateMsg::WithUpdate`.
   */
  block_max_gas: Uint64;
  /**
   * This contract pairs with the first voice module that a relayer connects it with, or the pair specified here. Once it has a pair, it will never handshake with a different voice module, even after channel closure. This ensures that there will only ever be one voice for every note.
   */
  pair?: Pair | null;
}
/**
 * This contract's voice. There is one voice per note, and many notes per voice.
 */
export interface Pair {
  connection_id: string;
  remote_port: string;
}
