/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * This structure describes the execute messages available in the contract.
 */
export type ExecuteMsg =
  | {
      execute: {
        id: Uint128;
      };
    }
  | {
      deposit: {
        assets: Description[];
      };
    }
  | {
      add_execution: {
        execution: Execution;
        overwrite: boolean;
      };
    }
  | {
      remove_executions: {
        ids?: Uint128[] | null;
      };
    }
  | {
      callback: CallbackWrapper;
    }
  | {
      transfer_ownership: {
        new_owner: string;
      };
    }
  | {
      drop_ownership_proposal: {};
    }
  | {
      accept_ownership: {};
    }
  | {
      update_config: {
        add_farms?: string[] | null;
        alliance?: AllianceConfigFor_String | null;
        arb_vault?: string | null;
        astroport?: AstroportConfigFor_String | null;
        capapult?: CapapultConfigFor_String | null;
        controller?: string | null;
        fee?: FeeConfigFor_String | null;
        hub?: string | null;
        remove_farms?: string[] | null;
        whitewhale?: WhiteWhaleConfigFor_String | null;
        zapper?: string | null;
      };
    };
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;
/**
 * This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked("terra...") }; NativeToken { denom: String::from("uluna") }; ```
 */
export type AssetInfo =
  | {
      token: {
        contract_addr: Addr;
        [k: string]: unknown;
      };
    }
  | {
      native_token: {
        denom: string;
        [k: string]: unknown;
      };
    };
/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;
export type DestinationState =
  | {
      deposit_amplifier: {
        receiver?: Addr | null;
      };
    }
  | {
      deposit_t_amplifier: {
        asset_info: AssetInfo;
        receiver?: Addr | null;
      };
    }
  | {
      deposit_arb_vault: {
        receiver?: Addr | null;
      };
    }
  | {
      deposit_farm: {
        farm: string;
        receiver?: Addr | null;
      };
    }
  | {
      swap_to: {
        asset_info: AssetInfo;
        receiver?: Addr | null;
      };
    }
  | {
      deposit_collateral: {
        market: DepositMarket;
      };
    }
  | {
      repay: {
        market: RepayMarket;
      };
    }
  | {
      deposit_liquidity: {
        dex: DepositLiquidity;
        lp_token: string;
      };
    }
  | {
      execute_contract: {
        asset_info: AssetInfo;
        contract: Addr;
        msg: Binary;
      };
    };
export type DepositMarket = {
  capapult: {
    asset_info: AssetInfo;
  };
};
export type RepayMarket = "capapult";
export type DepositLiquidity = {
  white_whale: {
    lock_up?: number | null;
  };
};
/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.
 *
 * This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.
 */
export type Binary = string;
export type Source =
  | "claim"
  | {
      claim_contract: {
        claim_type: ClaimType;
      };
    }
  | {
      astro_rewards: {
        lps: string[];
      };
    }
  | {
      white_whale_rewards: {
        lps: string[];
      };
    }
  | {
      wallet: {
        max_amount?: Uint128 | null;
        over: Description;
      };
    };
export type ClaimType = "white_whale_rewards" | "alliance_rewards";
/**
 * This structure describes the callback messages of the contract.
 */
export type CallbackMsg =
  | {
      authz_deposit: {
        max_amount?: Description[] | null;
        user_balance_start: Description[];
      };
    }
  | {
      authz_lock_ww_lp: {
        lp_balance: Description;
        unbonding_duration: number;
      };
    }
  | {
      swap: {
        asset_infos: AssetInfo[];
        into: AssetInfo;
      };
    }
  | {
      finish_execution: {
        destination: DestinationRuntime;
        executor: Addr;
      };
    };
export type DestinationRuntime =
  | {
      deposit_amplifier: {
        receiver?: Addr | null;
      };
    }
  | {
      deposit_t_amplifier: {
        asset_info: AssetInfo;
        receiver?: Addr | null;
      };
    }
  | {
      deposit_arb_vault: {
        receiver?: Addr | null;
      };
    }
  | {
      deposit_farm: {
        asset_infos: AssetInfo[];
        farm: string;
        receiver?: Addr | null;
      };
    }
  | {
      send_swap_result_to_user: {
        asset_info: AssetInfo;
        receiver?: Addr | null;
      };
    }
  | {
      deposit_collateral: {
        market: DepositMarket;
      };
    }
  | {
      repay: {
        market: RepayMarket;
      };
    }
  | {
      deposit_liquidity: {
        asset_infos: AssetInfo[];
        dex: DepositLiquidity;
        lp_token: string;
      };
    }
  | {
      execute_contract: {
        asset_info: AssetInfo;
        contract: Addr;
        msg: Binary;
      };
    };
/**
 * BasicPoints struct implementation. BasicPoints value is within [0, 10000] interval. Technically BasicPoints is wrapper over [`u16`] with additional limit checks and several implementations of math functions so BasicPoints object can be used in formulas along with [`Uint128`] and [`Decimal`].
 */
export type BasicPoints = number;

/**
 * This enum describes a Terra asset (native or CW20).
 */
export interface Description {
  /**
   * A token amount
   */
  amount: Uint128;
  /**
   * Information about an asset stored in a [`AssetInfo`] struct
   */
  info: AssetInfo;
  [k: string]: unknown;
}
export interface Execution {
  destination: DestinationState;
  schedule: Schedule;
  source: Source;
  user: string;
}
export interface Schedule {
  interval_s: number;
  start?: number | null;
}
export interface CallbackWrapper {
  id: number;
  message: CallbackMsg;
  user: Addr;
}
export interface AllianceConfigFor_String {
  claim_coins: AssetInfo[];
  contract: string;
  tamplifiers: [AssetInfo, string][];
}
export interface AstroportConfigFor_String {
  coins: AssetInfo[];
  generator: string;
}
export interface CapapultConfigFor_String {
  custody: string;
  market: string;
  overseer: string;
  stable_cw: string;
}
export interface FeeConfigFor_String {
  fee_bps: BasicPoints;
  operator_bps: BasicPoints;
  receiver: string;
}
export interface WhiteWhaleConfigFor_String {
  coins: AssetInfo[];
  fee_distributor: string;
  incentive_factory_addr: string;
  lp_tokens: string[];
}
