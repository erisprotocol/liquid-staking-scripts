/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;
/**
 * Represents the type of an fungible asset.
 *
 * Each **asset info** instance can be one of three variants:
 *
 * - Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.
 */
export type AssetInfoBaseFor_Addr =
  | {
      native: string;
    }
  | {
      cw20: Addr;
    };
/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;
export type LaunchTypeFor_Addr =
  | "coins"
  | {
      lp: {
        pair: Addr;
        project_share: Decimal;
      };
    };
/**
 * A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0
 *
 * The greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)
 */
export type Decimal = string;
export type Lockup =
  | "none"
  | {
      vesting: {
        end_s: number;
        start_s: number;
      };
    }
  | {
      bond: {
        end_s: number;
        name: string;
      };
    };
export type Runtime =
  | {
      lbp: {
        runtime: LbpRuntime;
        setup: LbpSetup;
      };
    }
  | {
      otc: {
        runtime: OtcRuntime;
        setup: OtcSetup;
      };
    }
  | {
      stream: {
        runtime: StreamRuntime;
        setup: StreamSetup;
      };
    };
/**
 * A fixed-point decimal value with 18 fractional digits, i.e. Decimal256(1_000_000_000_000_000_000) == 1.0
 *
 * The greatest possible value that can be represented is 115792089237316195423570985008687907853269984665640564039457.584007913129639935 (which is (2^256 - 1) / 10^18)
 */
export type Decimal256 = string;
/**
 * An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances out of primitive uint types or `new` to provide big endian bytes:
 *
 * ``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```
 */
export type Uint256 = string;
export type ArrayOf_TupleOf_LaunchAnd_Vesting = [Launch, Vesting][];

export interface Launch {
  cancelled: boolean;
  distribution: DistributionRuntime;
  done: boolean;
  from: AssetBaseFor_Addr;
  id: number;
  name: string;
  owner: Addr;
  runtime: Runtime;
  to_info: AssetInfoBaseFor_Addr;
}
export interface DistributionRuntime {
  bond_denom?: string | null;
  distribution_amount: Uint128;
  distribution_asset: AssetInfoBaseFor_Addr;
  setup: DistributionSetupFor_Addr;
}
export interface DistributionSetupFor_Addr {
  launch_type: LaunchTypeFor_Addr;
  lockup: Lockup;
  project_recipient: Addr;
}
/**
 * Represents a fungible asset with a known amount
 *
 * Each asset instance contains two values: `info`, which specifies the asset's type (CW20 or native), and its `amount`, which specifies the asset's amount.
 */
export interface AssetBaseFor_Addr {
  /**
   * Specifies the asset's amount
   */
  amount: Uint128;
  /**
   * Specifies the asset's type (CW20 or native)
   */
  info: AssetInfoBaseFor_Addr;
}
export interface LbpRuntime {
  deposited: Uint128;
}
export interface LbpSetup {
  deposit_end_s: number;
  deposit_start_s: number;
  withdraw_end_s: number;
  withdraw_start_s: number;
}
export interface OtcRuntime {
  remaining: Uint128;
}
export interface OtcSetup {
  to_amount: Uint128;
}
export interface StreamRuntime {
  current_streamed_price: Decimal256;
  dist_index: Decimal256;
  in_supply: Uint256;
  last_updated_s: number;
  out_remaining: Uint256;
  shares: Uint256;
  spent_in: Uint256;
}
export interface StreamSetup {
  deposit_end_s: number;
  deposit_start_s: number;
  stream_end_s: number;
  stream_start_s: number;
  withdraw_end_s: number;
  withdraw_start_s: number;
}
export interface Vesting {
  claimed: Uint128;
  end_s: number;
  start_s: number;
  total: AssetBaseFor_Addr;
}
