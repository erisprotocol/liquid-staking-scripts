/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type ExecuteMsg =
  | {
      update_config: ConfigOptionFor_String;
    }
  | {
      setup: {
        distribution: DistributionSetupFor_String;
        from: AssetBaseFor_String;
        name: string;
        setup: LaunchSetup;
        to_info: AssetInfoBaseFor_String;
      };
    }
  | {
      cancel: {
        id: number;
      };
    }
  | {
      deposit: {
        amount: Uint128;
        id: number;
        min_received?: Uint128 | null;
      };
    }
  | {
      withdraw: {
        amount?: Uint128 | null;
        id: number;
      };
    }
  | {
      launch: {
        id: number;
        min_received?: Uint128 | null;
      };
    }
  | {
      claim: {
        id: number;
      };
    }
  | {
      claim_bond: {};
    }
  | {
      claim_vesting: {
        id: number;
      };
    }
  | {
      callback: CallbackMsg;
    }
  | {
      update_ownership: Action;
    };
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;
/**
 * Represents the type of an fungible asset.
 *
 * Each **asset info** instance can be one of three variants:
 *
 * - Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.
 */
export type AssetInfoBaseFor_String =
  | {
      native: string;
    }
  | {
      cw20: string;
    };
/**
 * A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0
 *
 * The greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)
 */
export type Decimal = string;
export type LaunchTypeFor_String =
  | "coins"
  | {
      lp: {
        pair: string;
        project_share: Decimal;
      };
    };
export type Lockup =
  | "none"
  | {
      vesting: {
        end_s: number;
        start_s: number;
      };
    }
  | {
      bond: {
        end_s: number;
        name: string;
      };
    };
export type LaunchSetup =
  | {
      lbp: LbpSetup;
    }
  | {
      otc: OtcSetup;
    }
  | {
      stream: StreamSetup;
    };
export type CallbackMsg =
  | {
      distribute_lp: {
        distribution: DistributionRuntime;
        launch_id: number;
        lp_before: AssetBaseFor_Addr;
        user: Addr;
      };
    }
  | {
      store_distribution_amount: {
        launch_id: number;
        lp_before: AssetBaseFor_Addr;
      };
    };
/**
 * Represents the type of an fungible asset.
 *
 * Each **asset info** instance can be one of three variants:
 *
 * - Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.
 */
export type AssetInfoBaseFor_Addr =
  | {
      native: string;
    }
  | {
      cw20: Addr;
    };
/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;
export type LaunchTypeFor_Addr =
  | "coins"
  | {
      lp: {
        pair: Addr;
        project_share: Decimal;
      };
    };
/**
 * Actions that can be taken to alter the contract's ownership
 */
export type Action =
  | {
      transfer_ownership: {
        expiry?: Expiration | null;
        new_owner: string;
      };
    }
  | "accept_ownership"
  | "renounce_ownership";
/**
 * Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)
 */
export type Expiration =
  | {
      at_height: number;
    }
  | {
      at_time: Timestamp;
    }
  | {
      never: {};
    };
/**
 * A point in time in nanosecond precision.
 *
 * This type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.
 *
 * ## Examples
 *
 * ``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);
 *
 * let ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```
 */
export type Timestamp = Uint64;
/**
 * A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u64` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);
 *
 * let b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```
 */
export type Uint64 = string;

export interface ConfigOptionFor_String {
  denom_creation_fee?: AssetBaseFor_String | null;
  fee_lbp?: Decimal | null;
  fee_otc?: Decimal | null;
  fee_recipient?: string | null;
  fee_stream?: Decimal | null;
  whitelist?: string[] | null;
  zapper?: string | null;
}
/**
 * Represents a fungible asset with a known amount
 *
 * Each asset instance contains two values: `info`, which specifies the asset's type (CW20 or native), and its `amount`, which specifies the asset's amount.
 */
export interface AssetBaseFor_String {
  /**
   * Specifies the asset's amount
   */
  amount: Uint128;
  /**
   * Specifies the asset's type (CW20 or native)
   */
  info: AssetInfoBaseFor_String;
}
export interface DistributionSetupFor_String {
  launch_type: LaunchTypeFor_String;
  lockup: Lockup;
  project_recipient: string;
}
export interface LbpSetup {
  deposit_end_s: number;
  deposit_start_s: number;
  withdraw_end_s: number;
  withdraw_start_s: number;
}
export interface OtcSetup {
  to_amount: Uint128;
}
export interface StreamSetup {
  deposit_end_s: number;
  deposit_start_s: number;
  stream_end_s: number;
  stream_start_s: number;
  withdraw_end_s: number;
  withdraw_start_s: number;
}
export interface DistributionRuntime {
  bond_denom?: string | null;
  distribution_amount: Uint128;
  distribution_asset: AssetInfoBaseFor_Addr;
  setup: DistributionSetupFor_Addr;
}
export interface DistributionSetupFor_Addr {
  launch_type: LaunchTypeFor_Addr;
  lockup: Lockup;
  project_recipient: Addr;
}
/**
 * Represents a fungible asset with a known amount
 *
 * Each asset instance contains two values: `info`, which specifies the asset's type (CW20 or native), and its `amount`, which specifies the asset's amount.
 */
export interface AssetBaseFor_Addr {
  /**
   * Specifies the asset's amount
   */
  amount: Uint128;
  /**
   * Specifies the asset's type (CW20 or native)
   */
  info: AssetInfoBaseFor_Addr;
}
