/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;

/**
 * The struct describes a response used to return a staker's vAMP lock position.
 */
export interface UserInfoResponse {
  /**
   * Current voting power at the current
   */
  current_power: Uint128;
  /**
   * fixed amount available
   */
  fixed_amount: Uint128;
  /**
   * Timestamp when the user's lock expires
   */
  lock_end: number;
  /**
   * The slope at which the user's voting power decays
   */
  slope: Uint128;
  /**
   * Last timestamp when the user voted
   */
  vote_ts: number;
  /**
   * The vote distribution for all the validators the staker picked
   */
  votes: [string, number][];
  /**
   * The user's decreasing voting power
   */
  voting_power: Uint128;
}
