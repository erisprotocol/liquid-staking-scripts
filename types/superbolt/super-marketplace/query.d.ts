/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * This is like Cw721HandleMsg but we add a Mint command for an owner to make this stand-alone. You will likely want to remove mint and use other control logic in any contract that inherits this.
 */
export type QueryMsg =
  | {
      config: {};
    }
  | {
      state: {};
    }
  | {
      auction: {
        auction_id: Uint128;
      };
    }
  | {
      auctions: {
        limit?: number | null;
        start_after?: Uint128 | null;
      };
    }
  | {
      calculate_price: {
        amount: Uint128;
        nft_contract: string;
        token_id: string;
      };
    }
  | {
      nft_auction: {
        nft_contract: string;
        token_id: string;
      };
    }
  | {
      nft_auctions: {
        limit?: number | null;
        nft_contract: string;
        start_after?: [string, Uint128] | null;
      };
    }
  | {
      bid_history_by_auction_id: {
        auction_id: Uint128;
        limit?: number | null;
      };
    };
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;
