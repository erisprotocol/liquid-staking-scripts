/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * This structure describes the execute functions in the contract.
 */
export type ExecuteMsg =
  | {
      create_lock: {
        recipient?: string | null;
        time?: number | null;
      };
    }
  | {
      merge_lock: {
        token_id: string;
        token_id_add: string;
      };
    }
  | {
      split_lock: {
        amount: Uint128;
        recipient?: string | null;
        token_id: string;
      };
    }
  | {
      extend_lock_time: {
        time: number;
        token_id: string;
      };
    }
  | {
      extend_lock_amount: {
        token_id: string;
      };
    }
  | {
      lock_permanent: {
        token_id: string;
      };
    }
  | {
      unlock_permanent: {
        token_id: string;
      };
    }
  | {
      withdraw: {
        token_id: string;
      };
    }
  | {
      receive: Cw20ReceiveMsg;
    }
  | {
      update_blacklist: {
        append_addrs?: string[] | null;
        remove_addrs?: string[] | null;
      };
    }
  | {
      update_config: {
        append_deposit_assets?: DepositAssetFor_String[] | null;
        decommissioned?: boolean | null;
        push_update_contracts?: string[] | null;
      };
    }
  | {
      transfer_nft: {
        recipient: string;
        token_id: string;
      };
    }
  | {
      send_nft: {
        contract: string;
        msg: Binary;
        token_id: string;
      };
    }
  | {
      burn: {
        token_id: string;
      };
    }
  | {
      approve: {
        expires?: Expiration | null;
        spender: string;
        token_id: string;
      };
    }
  | {
      revoke: {
        spender: string;
        token_id: string;
      };
    }
  | {
      approve_all: {
        expires?: Expiration | null;
        operator: string;
      };
    }
  | {
      revoke_all: {
        operator: string;
      };
    };
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;
/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.
 *
 * This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.
 */
export type Binary = string;
export type AssetInfoConfig =
  | "default"
  | {
      exchange_rate: {
        contract: Addr;
      };
    };
/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;
/**
 * Represents the type of an fungible asset.
 *
 * Each **asset info** instance can be one of three variants:
 *
 * - Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.
 */
export type AssetInfoBaseFor_String =
  | {
      native: string;
    }
  | {
      cw20: string;
    };
/**
 * Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)
 */
export type Expiration =
  | {
      at_height: number;
    }
  | {
      at_time: Timestamp;
    }
  | {
      never: {};
    };
/**
 * A point in time in nanosecond precision.
 *
 * This type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.
 *
 * ## Examples
 *
 * ``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);
 *
 * let ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```
 */
export type Timestamp = Uint64;
/**
 * A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u64` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);
 *
 * let b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```
 */
export type Uint64 = string;

/**
 * Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg
 */
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
}
export interface DepositAssetFor_String {
  config: AssetInfoConfig;
  info: AssetInfoBaseFor_String;
}
