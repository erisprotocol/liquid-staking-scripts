/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type ExecuteMsg =
  | {
      create_lp: {
        assets: AssetInfoBaseFor_Addr[];
        min_received?: Uint128 | null;
        post_action?: PostActionCreate | null;
        stage: StageType;
      };
    }
  | {
      withdraw_lp: {
        min_received?: AssetBaseFor_Addr[] | null;
        post_action?: PostActionWithdraw | null;
        stage: StageType;
      };
    }
  | {
      swap: {
        /**
         * List of reward asset send to compound
         */
        assets: AssetInfoBaseFor_Addr[];
        /**
         * LP into which the assets should be compounded into
         */
        into: AssetInfoBaseFor_String;
        min_received?: Uint128 | null;
        /**
         * Receiver address for LP token
         */
        receiver?: string | null;
      };
    }
  | {
      update_config: {
        delete_routes?: RouteDelete[] | null;
        insert_routes?: RouteInit[] | null;
        update_centers?: AssetInfoBaseFor_String[] | null;
      };
    }
  | {
      callback: CallbackMsg;
    };
/**
 * Represents the type of an fungible asset.
 *
 * Each **asset info** instance can be one of three variants:
 *
 * - Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.
 */
export type AssetInfoBaseFor_Addr =
  | {
      native: string;
    }
  | {
      cw20: Addr;
    };
/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;
export type PostActionCreate =
  | {
      stake: {
        asset_staking: Addr;
        receiver?: string | null;
      };
    }
  | {
      send_result: {
        receiver?: string | null;
      };
    };
export type StageType =
  | {
      white_whale: {
        pair: Addr;
      };
    }
  | {
      astroport: {
        pair: Addr;
      };
    };
export type PostActionWithdraw = {
  swap_to: {
    asset: AssetInfoBaseFor_Addr;
    min_received?: Uint128 | null;
    receiver?: string | null;
  };
};
/**
 * Represents the type of an fungible asset.
 *
 * Each **asset info** instance can be one of three variants:
 *
 * - Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.
 */
export type AssetInfoBaseFor_String =
  | {
      native: string;
    }
  | {
      cw20: string;
    };
export type CallbackMsg =
  | {
      optimal_swap: {
        pair_info: PairInfo;
      };
    }
  | {
      swap_stage: {
        stage: Stage;
      };
    }
  | {
      provide_liquidity: {
        pair_info: PairInfo;
        receiver?: string | null;
      };
    }
  | {
      assert_received: {
        asset: AssetBaseFor_Addr;
      };
    }
  | {
      stake: {
        asset_staking: Addr;
        receiver: string;
        token: AssetInfoBaseFor_Addr;
      };
    }
  | {
      send_result: {
        receiver: string;
        token: AssetInfoBaseFor_Addr;
      };
    }
  | {
      send_results: {
        min_received?: AssetBaseFor_Addr[] | null;
        receiver: string;
        tokens: AssetInfoBaseFor_Addr[];
      };
    };
export type PairType =
  | {
      xyk: {};
    }
  | {
      stable: {};
    }
  | {
      custom: string;
    }
  | {
      stable_white_whale: {};
    }
  | {
      xyk_white_whale: {};
    };

/**
 * Represents a fungible asset with a known amount
 *
 * Each asset instance contains two values: `info`, which specifies the asset's type (CW20 or native), and its `amount`, which specifies the asset's amount.
 */
export interface AssetBaseFor_Addr {
  /**
   * Specifies the asset's amount
   */
  amount: Uint128;
  /**
   * Specifies the asset's type (CW20 or native)
   */
  info: AssetInfoBaseFor_Addr;
}
export interface RouteDelete {
  both?: boolean | null;
  from: AssetInfoBaseFor_Addr;
  to: AssetInfoBaseFor_Addr;
}
export interface RouteInit {
  routes: Stage[];
}
export interface Stage {
  from: AssetInfoBaseFor_Addr;
  stage_type: StageType;
  to: AssetInfoBaseFor_Addr;
}
export interface PairInfo {
  /**
   * Asset information for the assets in the pool
   */
  asset_infos: AssetInfoBaseFor_Addr[];
  /**
   * Pair contract address
   */
  contract_addr: Addr;
  /**
   * Pair LP token address
   */
  liquidity_token: AssetInfoBaseFor_Addr;
  /**
   * The pool type (xyk, stableswap etc) available in [`PairType`]
   */
  pair_type: PairType;
}
