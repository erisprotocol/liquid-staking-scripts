/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type ExecuteMsg =
  | {
      add_bribe: {
        bribe?: AssetBaseFor_String | null;
        distribution: BribeDistribution;
        for_info: AssetInfoBaseFor_String;
        gauge: string;
      };
    }
  | {
      withdraw_bribes: {
        period: number;
      };
    }
  | {
      claim_bribes: {
        periods?: number[] | null;
      };
    }
  | {
      whitelist_assets: AssetInfoBaseFor_String[];
    }
  | {
      remove_assets: AssetInfoBaseFor_String[];
    }
  | {
      update_config: {
        allow_any?: boolean | null;
        fee?: AssetBaseFor_String | null;
      };
    };
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;
/**
 * Represents the type of an fungible asset.
 *
 * Each **asset info** instance can be one of three variants:
 *
 * - Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.
 */
export type AssetInfoBaseFor_String =
  | {
      native: string;
    }
  | {
      cw20: string;
    };
export type BribeDistribution =
  | "next"
  | {
      func: {
        end: number;
        func_type: FuncType;
        start?: number | null;
      };
    }
  | {
      specific: [number, Uint128][];
    };
export type FuncType = "linear" | "bezier" | "ease_in_out_cubic" | "ease_in_cubic" | "ease_out_cubic" | "parametric";

/**
 * Represents a fungible asset with a known amount
 *
 * Each asset instance contains two values: `info`, which specifies the asset's type (CW20 or native), and its `amount`, which specifies the asset's amount.
 */
export interface AssetBaseFor_String {
  /**
   * Specifies the asset's amount
   */
  amount: Uint128;
  /**
   * Specifies the asset's type (CW20 or native)
   */
  info: AssetInfoBaseFor_String;
}
