/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type QueryMsg =
  | {
      config: {};
    }
  | {
      whitelisted_assets: {};
    }
  | {
      whitelisted_asset_details: {};
    }
  | {
      reward_distribution: {};
    }
  | {
      staked_balance: AssetQuery;
    }
  | {
      pending_rewards: AssetQuery;
    }
  | {
      all_staked_balances: AllStakedBalancesQuery;
    }
  | {
      all_pending_rewards: AllPendingRewardsQuery;
    }
  | {
      all_pending_rewards_detail: AllPendingRewardsQuery;
    }
  | {
      total_staked_balances: {};
    };
/**
 * Represents the type of an fungible asset.
 *
 * Each **asset info** instance can be one of three variants:
 *
 * - Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.
 */
export type AssetInfoBaseFor_Addr =
  | {
      native: string;
    }
  | {
      cw20: Addr;
    };
/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;

export interface AssetQuery {
  address: string;
  asset: AssetInfoBaseFor_Addr;
}
export interface AllStakedBalancesQuery {
  address: string;
}
export interface AllPendingRewardsQuery {
  address: string;
}
