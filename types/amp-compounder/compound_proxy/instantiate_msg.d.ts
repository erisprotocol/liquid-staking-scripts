/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type LpType = "astroport" | "white_whale";
/**
 * A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0
 *
 * The greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)
 */
export type Decimal = string;
/**
 * This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked("terra...") }; NativeToken { denom: String::from("uluna") }; ```
 */
export type AssetInfo =
  | {
      token: {
        contract_addr: Addr;
        [k: string]: unknown;
      };
    }
  | {
      native_token: {
        denom: string;
        [k: string]: unknown;
      };
    };
/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;
export type RouteInit =
  | {
      path: {
        route: AssetInfo[];
        router: string;
        router_type: RouterType;
      };
    }
  | {
      pair_proxy: {
        pair_contract: string;
        /**
         * when specified, a pair can be defined as a single direction
         */
        single_direction_from?: AssetInfo | null;
      };
    };
export type RouterType =
  | ("astro_swap" | "terra_swap" | "token_swap")
  | {
      t_f_m: {
        route: [string, Addr][];
        [k: string]: unknown;
      };
    };

/**
 * This structure describes the basic settings for creating a contract.
 */
export interface InstantiateMsg {
  factory?: string | null;
  lps: LpInit[];
  owner: string;
  routes: RouteInit[];
}
export interface LpInit {
  /**
   * The swap commission
   */
  commission_bps: number;
  lp_type?: LpType | null;
  /**
   * The pair info
   */
  pair_contract: string;
  /**
   * The slippage tolerance when providing liquidity
   */
  slippage_tolerance: Decimal;
  /**
   * Token used for providing liquidity
   */
  wanted_token: AssetInfo;
}
