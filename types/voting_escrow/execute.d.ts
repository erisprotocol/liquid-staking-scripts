/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * This structure describes the execute functions in the contract.
 */
export type ExecuteMsg =
  | {
      extend_lock_time: {
        time: number;
      };
    }
  | {
      receive: Cw20ReceiveMsg;
    }
  | {
      withdraw: {};
    }
  | {
      propose_new_owner: {
        expires_in: number;
        new_owner: string;
      };
    }
  | {
      drop_ownership_proposal: {};
    }
  | {
      claim_ownership: {};
    }
  | {
      update_blacklist: {
        append_addrs?: string[] | null;
        remove_addrs?: string[] | null;
      };
    }
  | {
      update_marketing: {
        /**
         * A longer description of the token and its utility. Designed for tooltips or such
         */
        description?: string | null;
        /**
         * The address (if any) that can update this data structure
         */
        marketing?: string | null;
        /**
         * A URL pointing to the project behind this token
         */
        project?: string | null;
      };
    }
  | {
      upload_logo: Logo;
    }
  | {
      update_config: {
        new_guardian?: string | null;
        push_update_contracts?: string[] | null;
      };
    }
  | {
      set_logo_urls_whitelist: {
        whitelist: string[];
      };
    };
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;
/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.
 *
 * This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.
 */
export type Binary = string;
/**
 * This is used for uploading logo data, or setting it in InstantiateData
 */
export type Logo =
  | {
      url: string;
    }
  | {
      embedded: EmbeddedLogo;
    };
/**
 * This is used to store the logo on the blockchain in an accepted format. Enforce maximum size of 5KB on all variants.
 */
export type EmbeddedLogo =
  | {
      svg: Binary;
    }
  | {
      png: Binary;
    };

/**
 * Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg
 */
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
  [k: string]: unknown;
}
