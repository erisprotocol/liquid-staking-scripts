/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type ExecuteMsg =
  | {
      receive: Cw20ReceiveMsg;
    }
  | {
      bond: {
        donate?: boolean | null;
        receiver?: string | null;
      };
    }
  | {
      withdraw_unbonded: {
        receiver?: string | null;
      };
    }
  | {
      transfer_ownership: {
        new_owner: string;
      };
    }
  | {
      accept_ownership: {};
    }
  | {
      drop_ownership_proposal: {};
    }
  | {
      harvest: {
        cw20_assets?: string[] | null;
        native_denoms?: string[] | null;
        router?: [Empty, AssetInfoBaseFor_Addr[]] | null;
        stages?: [StageType, AssetInfoBaseFor_Addr, Decimal | null, Uint128 | null][][] | null;
        withdrawals?: [WithdrawType, AssetInfoBaseFor_Addr][] | null;
      };
    }
  | {
      reconcile: {};
    }
  | {
      submit_batch: {};
    }
  | {
      vote: {
        proposal_id: number;
        vote: VoteOption;
      };
    }
  | {
      callback: CallbackMsg;
    }
  | {
      update_config: {
        /**
         * Specifies wether donations are allowed.
         */
        allow_donations?: boolean | null;
        /**
         * Update the default max_spread
         */
        default_max_spread?: number | null;
        /**
         * How often the unbonding queue is to be executed, in seconds
         */
        epoch_period?: number | null;
        /**
         * Sets a new operator
         */
        operator?: string | null;
        /**
         * Contract address where fees are sent
         */
        protocol_fee_contract?: string | null;
        /**
         * Fees that are being applied during reinvest of staking rewards
         */
        protocol_reward_fee?: Decimal | null;
        /**
         * Sets the stages preset
         */
        stages_preset?: [StageType, AssetInfoBaseFor_Addr, Decimal | null, Uint128 | null][][] | null;
        /**
         * The staking module's unbonding time, in seconds
         */
        unbond_period?: number | null;
        /**
         * Update the vote_operator
         */
        vote_operator?: string | null;
        /**
         * Sets the withdrawals preset
         */
        withdrawals_preset?: [WithdrawType, AssetInfoBaseFor_Addr][] | null;
      };
    }
  | {
      queue_unbond: {
        receiver?: string | null;
      };
    }
  | {
      claim: {
        claims: ClaimType[];
      };
    };
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;
/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.
 *
 * This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.
 */
export type Binary = string;
/**
 * Represents the type of an fungible asset.
 *
 * Each **asset info** instance can be one of three variants:
 *
 * - Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.
 */
export type AssetInfoBaseFor_Addr =
  | {
      native: string;
    }
  | {
      cw20: Addr;
    };
/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;
export type StageType = {
  dex: {
    addr: Addr;
  };
};
/**
 * A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0
 *
 * The greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)
 */
export type Decimal = string;
export type WithdrawType = {
  dex: {
    addr: Addr;
  };
};
export type VoteOption = "yes" | "no" | "abstain" | "no_with_veto";
export type CallbackMsg =
  | {
      withdraw_lps: {
        withdrawals: [WithdrawType, AssetInfoBaseFor_Addr][];
      };
    }
  | {
      single_stage_swap: {
        stage: [StageType, AssetInfoBaseFor_Addr, Decimal | null, Uint128 | null][];
      };
    }
  | {
      multi_swap_router: {
        router: [Empty, AssetInfoBaseFor_Addr[]];
      };
    }
  | {
      reinvest: {};
    }
  | {
      assert_balance: {
        expected: Asset;
      };
    }
  | {
      check_received_coin: {
        snapshot: Asset;
        snapshot_stake: Asset;
      };
    };
/**
 * This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked("stake...") }; NativeToken { denom: String::from("uluna") }; ```
 */
export type AssetInfo =
  | {
      token: {
        contract_addr: Addr;
      };
    }
  | {
      native_token: {
        denom: string;
      };
    };
export type ClaimType = {
  default: string;
};

/**
 * Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg
 */
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
}
/**
 * An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.
 *
 * It is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)
 */
export interface Empty {
  [k: string]: unknown;
}
/**
 * This enum describes a Terra asset (native or CW20).
 */
export interface Asset {
  /**
   * A token amount
   */
  amount: Uint128;
  /**
   * Information about an asset stored in a [`AssetInfo`] struct
   */
  info: AssetInfo;
}
