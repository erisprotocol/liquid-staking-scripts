/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type DaoInterfaceFor_String =
  | {
      enterprise: {
        addr: string;
        fund_distributor: string;
      };
    }
  | {
      enterprise_v2: {
        distributor: string;
        gov: string;
        membership: string;
      };
    }
  | {
      cw4: {
        addr: string;
        fund_distributor: string;
        gov: string;
      };
    }
  | {
      alliance: {
        addr: string;
      };
    }
  | {
      capa: {
        gov: string;
      };
    };
/**
 * A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0
 *
 * The greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)
 */
export type Decimal = string;
/**
 * This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked("stake...") }; NativeToken { denom: String::from("uluna") }; ```
 */
export type AssetInfo =
  | {
      token: {
        contract_addr: Addr;
      };
    }
  | {
      native_token: {
        denom: string;
      };
    };
/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;

export interface InstantiateMsg {
  /**
   * Dao specific config
   */
  dao_interface: DaoInterfaceFor_String;
  /**
   * Name of the liquid staking token
   */
  denom: string;
  /**
   * How often the unbonding queue is to be executed, in seconds
   */
  epoch_period: number;
  /**
   * Account who can call harvest
   */
  operator: string;
  /**
   * Account who can call certain privileged functions
   */
  owner: string;
  /**
   * Contract address where fees are sent
   */
  protocol_fee_contract: string;
  /**
   * Fees that are being applied during reinvest of staking rewards
   */
  protocol_reward_fee: Decimal;
  /**
   * The staking module's unbonding time, in seconds
   */
  unbond_period: number;
  /**
   * Denom of the underlaying staking token
   */
  utoken: AssetInfo;
  /**
   * Contract address that is allowed to vote
   */
  vote_operator?: string | null;
}
