/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;
/**
 * BasicPoints struct implementation. BasicPoints value is within [0, 10000] interval. Technically BasicPoints is wrapper over [`u16`] with additional limit checks and several implementations of math functions so BasicPoints object can be used in formulas along with [`Uint128`] and [`Decimal`].
 */
export type BasicPoints = number;

export interface UserInfoDetailsResponse {
  staked: Uint128;
  user: UserInfoResponse;
}
/**
 * The struct describes a response used to return a staker's vAMP lock position.
 */
export interface UserInfoResponse {
  vote_ts: number;
  votes: [string, BasicPoints][];
  voting_power: Uint128;
}
